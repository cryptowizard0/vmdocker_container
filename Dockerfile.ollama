FROM --platform=linux/amd64 ubuntu:24.04

ENV GOLANG_VERSION=1.24.2
ENV DEBIAN_FRONTEND=noninteractive

# Install basic tools
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    gcc \
    build-essential \
    pkg-config \
    libreadline-dev \
    liblua5.3-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Go
RUN wget https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz \
    && rm go${GOLANG_VERSION}.linux-amd64.tar.gz

ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/go
ENV PATH=$PATH:$GOPATH/bin

ENV GOPRIVATE=github.com/hymatrix/hymx/


# Install Ollama
RUN curl -fsSL https://ollama.com/install.sh | sh

#ENV OLLAMA_HOST=0.0.0.0
ENV OLLAMA_MODELS=/app/models
ENV RUNTIME_TYPE=ollama

WORKDIR /_build

# Initialize Go modules and download dependencies
ENV GOPROXY=https://goproxy.cn,direct
COPY go.mod go.sum /_build/
RUN cd /_build && go mod download

COPY . /_build/

# Build runtime
RUN cd /_build && go build -tags=lua53 -o main

# Setup runtime environment
WORKDIR /app
RUN cp /_build/main . && \
    rm -rf /_build

# set dns
# RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
# echo "nameserver 8.8.4.4" >> /etc/resolv.conf

# Create a startup script
RUN echo '#!/bin/bash\nollama serve &\nsleep 5' > /app/start_ollama.sh && \
    chmod +x /app/start_ollama.sh 
    #echo '#!/bin/bash\nkillall ollama' > /app/stop_ollama.sh && \
    #chmod +x /app/start_ollama.sh /app/stop_ollama.sh

# startup ollama
# download model
# stop ollama
RUN /app/start_ollama.sh && \
    ollama pull llama3:8b 

# startup script
RUN echo '#!/bin/bash\nollama serve &\nsleep 5\nexec /app/main' > /app/start.sh && \
    chmod +x /app/start.sh

EXPOSE 8080

CMD ["/app/start.sh"]